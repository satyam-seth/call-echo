var V = Object.defineProperty; var M = (n, e, t) => e in n ? V(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t; var c = (n, e, t) => M(n, typeof e != "symbol" ? e + "" : e, t); (function () { const e = document.createElement("link").relList; if (e && e.supports && e.supports("modulepreload")) return; for (const r of document.querySelectorAll('link[rel="modulepreload"]')) i(r); new MutationObserver(r => { for (const s of r) if (s.type === "childList") for (const o of s.addedNodes) o.tagName === "LINK" && o.rel === "modulepreload" && i(o) }).observe(document, { childList: !0, subtree: !0 }); function t(r) { const s = {}; return r.integrity && (s.integrity = r.integrity), r.referrerPolicy && (s.referrerPolicy = r.referrerPolicy), r.crossOrigin === "use-credentials" ? s.credentials = "include" : r.crossOrigin === "anonymous" ? s.credentials = "omit" : s.credentials = "same-origin", s } function i(r) { if (r.ep) return; r.ep = !0; const s = t(r); fetch(r.href, s) } })(); class b { static async queryPermissionStatus(e) { if (!("permissions" in navigator)) return console.warn(`Permission '${e}' is not supported by this browser.`), null; try { return (await navigator.permissions.query({ name: e })).state } catch (t) { return console.error(`Error querying permission '${e}':`, t), null } } static async checkPermission(e) { try { const t = await this.queryPermissionStatus(e); return t === "granted" ? !0 : (t === "prompt" && console.warn(`Permission '${e}' requires a specific API call to trigger the prompt.`), !1) } catch (t) { return console.error(`Error checking permission '${e}':`, t), !1 } } static async watchPermissionState(e, t) { if (!("permissions" in navigator)) { console.warn(`Permission '${e}' is not supported by this browser.`); return } try { const i = await navigator.permissions.query({ name: e }); t(i.state), i.onchange = () => { t(i.state) } } catch (i) { console.error(`Error watching permission '${e}':`, i) } } } const x = ["microphone", "camera", "geolocation", "notifications"]; function S(n, e) { const t = document.createElement("button"); return t.innerText = n, t.addEventListener("click", e), t } function $(n) { return S(`Get ${n} permission Status`, async () => { const e = await b.queryPermissionStatus(n); alert(e ? `Permission ${n} status: ${e}` : `Permission ${n} is not supported or an error occurred.`) }) } function j(n) { return S(`Check have ${n} permission or not`, async () => { const e = await b.checkPermission(n); alert(e ? `Have ${n} permission.` : `Do not have ${n} Permission.`) }) } function F(n) { return S(`Watch ${n} permission state`, async () => { await b.watchPermissionState(n, e => { alert(`Permission ${n} state changed to: ${e}`) }) }) } function G() { const n = document.createElement("div"); n.className = "permission-container"; const e = document.createElement("h2"); return e.innerText = "Permission Demo", n.appendChild(e), x.forEach(t => { const i = document.createElement("div"); i.className = "permission-section", i.innerHTML = `<h3>${t}</h3>`, i.appendChild($(t)), i.appendChild(j(t)), i.appendChild(F(t)), n.appendChild(i) }), n } const d = class d { constructor() { c(this, "_userConstraints"); c(this, "_displayConstraints"); c(this, "_userStream", null); c(this, "_displayStream", null); c(this, "_audioInputDevices", []); c(this, "_audioOutputDevices", []); c(this, "_videoInputDevices", []); c(this, "nextCallbackId", 0); c(this, "deviceChangeCallbacks", new Map); c(this, "displayStreamEndCallbacks", new Map); this.startListeningToDeviceChanges() } static get instance() { return d._instance || (d._instance = new d), d._instance } async getDisplayMedia(e) { try { if (!navigator.mediaDevices || !navigator.mediaDevices.getDisplayMedia) throw new Error("getDisplayMedia is not supported in this browser."); return this.stopDisplayStream(), this._displayConstraints = e, this._displayStream = await navigator.mediaDevices.getDisplayMedia(this._displayConstraints), this._displayStream.getVideoTracks().forEach(t => { t.onended = () => { console.log("Display track ended"), this.stopDisplayStream(), this.notifyDisplayStreamEnd() } }), this._displayStream } catch (t) { throw console.error("Error accessing display media.", t), t } } stopDisplayStream() { var e; (e = this._displayStream) == null || e.getTracks().forEach(t => t.stop()), this._displayStream = null } get displayStream() { return this._displayStream } get displayStreamConstraints() { return this._displayConstraints } get displayStreamActive() { return !!this._displayStream && this._displayStream.getTracks().some(e => e.readyState === "live") } notifyDisplayStreamEnd() { console.log("Notifying display stream end callbacks.", this.deviceChangeCallbacks.size); for (const e of this.displayStreamEndCallbacks.values()) e() } unregisterDisplayStreamEnd(e) { this.displayStreamEndCallbacks.delete(e) } registerDisplayStreamEnd(e) { const t = this.nextCallbackId++; return this.displayStreamEndCallbacks.set(t, e), t } async getUserMedia(e) { try { if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) throw new Error("getUserMedia is not supported in this browser."); return this.stopMediaStream(), this._userConstraints = e, this._userStream = await navigator.mediaDevices.getUserMedia(this._userConstraints), this._userStream } catch (t) { throw console.error("Error accessing media devices.", t), t } } stopMediaStream() { var e; (e = this._userStream) == null || e.getTracks().forEach(t => t.stop()), this._userStream = null } toggleUserTrack(e) { var t; (t = this._userStream) == null || t.getTracks().forEach(i => { i.kind === e && (i.enabled = !i.enabled) }) } enableUserTrack(e) { var t; (t = this._userStream) == null || t.getTracks().forEach(i => { i.kind === e && (i.enabled = !0) }) } disableUserTrack(e) { var t; (t = this._userStream) == null || t.getTracks().forEach(i => { i.kind === e && (i.enabled = !1) }) } isUserTrackEnabled(e) { var t; return ((t = this._userStream) == null ? void 0 : t.getTracks().some(i => i.kind === e && i.enabled)) ?? !1 } get userStream() { return this._userStream } get userStreamConstraints() { return this._userConstraints } async enumerateDevices() { if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) throw new Error("enumerateDevices is not supported in this browser."); try { const e = await navigator.mediaDevices.enumerateDevices(); return this._audioInputDevices = e.filter(t => t.kind === "audioinput"), this._videoInputDevices = e.filter(t => t.kind === "videoinput"), this._audioOutputDevices = e.filter(t => t.kind === "audiooutput"), e } catch (e) { throw console.error("Error enumerating devices:", e), e } } get audioInputDevices() { return this._audioInputDevices } get audioOutputDevices() { return this._audioOutputDevices } get videoInputDevices() { return this._videoInputDevices } async setInputDevice(e, t) { let i = !0, r = !0; this._userStream && (i = this.isUserTrackEnabled("audio"), r = this.isUserTrackEnabled("video")); try { const s = await this.getUserMedia(e); i || this.disableUserTrack("audio"), r || this.disableUserTrack("video"), t(s) } catch (s) { console.error("Error setting update input device:", s) } } async setAudioInputDevice(e, t) { const i = { ...this._userConstraints, audio: { deviceId: { exact: e } } }; try { return await this.setInputDevice(i, t), !0 } catch (r) { return console.error("Error setting audio input device:", r), !1 } } async setVideoInputDevice(e, t) { const i = { ...this._userConstraints, video: { deviceId: { exact: e } } }; try { return await this.setInputDevice(i, t), !0 } catch (r) { return console.error("Error setting video input device:", r), !1 } } async setAudioOutputDevice(e, t) { if (typeof e.sinkId < "u") { try { console.log("Setting audio output device to:", t), await e.setSinkId(t) } catch (i) { let r = i; i.name === "SecurityError" && (r = `You need to use HTTPS for selecting audio output device: ${i}`), console.error(r) } return !0 } else return console.warn("Browser does not support output device selection."), !1 } get currentAudioInputDeviceId() { var e, t; return (t = (e = this._userStream) == null ? void 0 : e.getAudioTracks()[0]) == null ? void 0 : t.getSettings().deviceId } get currentVideoInputDeviceId() { var e, t; return (t = (e = this._userStream) == null ? void 0 : e.getVideoTracks()[0]) == null ? void 0 : t.getSettings().deviceId } registerDeviceChange(e) { const t = this.nextCallbackId++; return this.deviceChangeCallbacks.set(t, e), t } unregisterDeviceChange(e) { this.deviceChangeCallbacks.delete(e) } notifyDeviceChange() { console.log("Notifying device change callbacks.", this.deviceChangeCallbacks.size); for (const e of this.deviceChangeCallbacks.values()) e() } async startListeningToDeviceChanges() { if (!navigator.mediaDevices || !navigator.mediaDevices.addEventListener) { console.warn("Device change events are not supported in this browser."); return } navigator.mediaDevices.addEventListener("devicechange", async () => { if (console.log("Device change detected."), await this.enumerateDevices(), this._userStream) { const e = this.currentAudioInputDeviceId, t = this.currentVideoInputDeviceId; (e && !this._audioInputDevices.some(i => i.deviceId === e) || t && !this._videoInputDevices.some(i => i.deviceId === t)) && this.stopMediaStream() } this.notifyDeviceChange() }) } }; c(d, "_instance"); let a = d, m = null, v = null; function l(n, e, t, i = !1) { const r = document.createElement("button"); return r.id = e, r.disabled = i, r.innerText = n, r.addEventListener("click", t), r } function u(n, e) { const t = document.querySelector(`#${n}`); t.disabled = e } function w() { u("stop-local-user-stream-btn", !1) } function H() { u("stop-local-display-stream-btn", !1) } function U() { const n = document.querySelector("#toggle-user-audio-btn"); n.disabled = !1, n.innerText = "Disable User Audio" } function z() { const n = document.querySelector("#toggle-user-audio-btn"); n.disabled = !0, n.innerText = "Enable User Audio" } function K() { const n = document.querySelector("#toggle-user-video-btn"); n.disabled = !1, n.innerText = "Disable User Video" } function R() { const n = document.querySelector("#toggle-user-video-btn"); n.disabled = !0, n.innerText = "Enable User Video" } function k() { u("local-user-stream-video-btn", !0) } function g() { u("local-user-stream-video-btn", !1) } function T() { u("local-user-stream-audio-btn", !0) } function h() { u("local-user-stream-audio-btn", !1) } function _() { u("local-display-stream-btn", !0) } function f() { u("local-display-stream-btn", !1) } function W(n) { a.instance.toggleUserTrack("audio"); const e = a.instance.isUserTrackEnabled("audio"); n.target.innerText = e ? "Disable User Audio" : "Enable User Audio" } function Y() { return l("Disable User Audio", "toggle-user-audio-btn", W, !0) } function J(n) { a.instance.toggleUserTrack("video"); const e = a.instance.isUserTrackEnabled("video"); n.target.innerText = e ? "Disable User Video" : "Enable User Video" } function Q() { return l("Disable Video", "toggle-user-video-btn", J, !0) } function X(n) { const e = document.querySelector("audio#user-audio"); e && (e.srcObject = n) } function Z(n) { const e = document.querySelector("video#user-video"); e && (e.srcObject = n) } function N() { const n = document.querySelector("video#user-video"), e = document.querySelector("audio#user-audio"); n && (n.srcObject = null, n.remove()), e && (e.srcObject = null, e.remove()) } function ee() { const n = document.querySelector("video#display-video"); n && (n.srcObject = null, n.remove()) } function A() { const n = document.querySelector(".user-audio-input-devices-selector-container"), e = document.querySelector(".user-audio-output-devices-selector-container"), t = document.querySelector(".user-video-input-devices-selector-container"); n == null || n.remove(), e == null || e.remove(), t == null || t.remove() } function te() { return l("Stop local user stream", "stop-local-user-stream-btn", async n => { n.target.disabled = !0, h(), g(), f(), z(), R(), N(), A(), ae(), a.instance.stopMediaStream() }, !0) } function q() { h(), g(), f(), ee(), y(!1), oe(), a.instance.stopDisplayStream() } function ne() { return l("Stop local display stream", "stop-local-display-stream-btn", async n => { n.target.disabled = !0, q() }, !0) } function P(n, e) { const t = document.createElement("video"); return t.id = e, t.srcObject = n, t.autoplay = !0, t.controls = !0, t.style.width = "100%", t.style.height = "100%", t } function ie(n, e) { const t = document.createElement("audio"); return t.id = e, t.srcObject = n, t.autoplay = !0, t.controls = !0, t } function D(n, e, t, i) { const r = document.createElement("select"); return r.id = n, e.forEach(s => { const o = document.createElement("option"); o.value = s.deviceId, o.textContent = s.label || `Device ${s.deviceId}`, o.selected = i !== void 0 && s.deviceId === i, r.appendChild(o) }), r.addEventListener("change", async s => { const o = s.target.value; await t(o) }), r } function E(n, e) { const t = document.createElement("div"); t.className = "user-audio-input-devices-selector-container"; const i = "user-audio-input-devices-selector", r = document.createElement("label"); r.textContent = "User Audio Input Devices:", r.setAttribute("for", i), t.appendChild(r); const s = D(i, n, async o => { await a.instance.setAudioInputDevice(o, X) }, e); return t.appendChild(s), t } function C(n) { const e = document.createElement("div"); e.className = "user-audio-output-devices-selector-container"; const t = "user-audio-output-devices-selector", i = document.createElement("label"); return i.textContent = "Audio Output Devices:", i.setAttribute("for", t), e.appendChild(i), e.appendChild(D(t, n, async r => { const s = document.querySelector("video#user-video"); s && await a.instance.setAudioOutputDevice(s, r); const o = document.querySelector("audio#user-audio"); o && await a.instance.setAudioOutputDevice(o, r) })), e } function re() { const n = document.createElement("div"); n.className = "display-surface-selector-container"; const e = "display-surface-selector", t = document.createElement("label"); t.textContent = "Display Surface:", t.setAttribute("for", e), n.appendChild(t); const i = document.createElement("select"); return i.id = e, [{ title: "Show default sharing options", value: "" }, { title: "Prefer to share a browser tab", value: "browser" }, { title: "Prefer to share a window", value: "window" }, { title: "Prefer to share an entire screen", value: "monitor" }].forEach(s => { const o = document.createElement("option"); o.value = s.value, o.textContent = s.title, i.appendChild(o) }), n.appendChild(i), n } function se() { return document.querySelector("#display-surface-selector").value } function y(n) { const e = document.querySelector("#display-surface-selector"); e.disabled = n } function O(n, e) { const t = document.createElement("div"); t.className = "user-video-input-devices-selector-container"; const i = "user-video-input-devices-selector", r = document.createElement("label"); r.textContent = "Video Input Devices:", r.setAttribute("for", i), t.appendChild(r); const s = D(i, n, async o => { await a.instance.setVideoInputDevice(o, Z) }, e); return t.appendChild(s), t } function ae() { m !== null && (a.instance.unregisterDeviceChange(m), m = null) } function B(n) { m = a.instance.registerDeviceChange(async () => { if (console.log("Device changed"), a.instance.userStream === null) { console.info("Media stream is null, getting new stream"); const s = await a.instance.getUserMedia({ video: !n, audio: !0 }), o = document.querySelector("video#user-video"), p = document.querySelector("audio#user-audio"); p && n ? (console.info("Updating audio stream to audio element"), p.srcObject = s) : o && (console.info("Updating video stream to video element"), o.srcObject = s) } const e = document.querySelector(".media-container"); A(); const t = a.instance.audioInputDevices, i = a.instance.audioOutputDevices, r = a.instance.currentAudioInputDeviceId; if (e.append(E(t, r)), e.append(C(i)), !n) { const s = a.instance.videoInputDevices, o = a.instance.currentVideoInputDeviceId; e.append(O(s, o)) } }) } function oe() { v !== null && (a.instance.unregisterDisplayStreamEnd(v), v = null) } function ce() { a.instance.displayStream !== null && (v = a.instance.registerDisplayStreamEnd(async () => { console.log("Display stream end"), q() })) } function ue() { return l("Get local user video stream", "local-user-stream-video-btn", async n => { n.target.disabled = !0, T(), _(); let e; try { e = await a.instance.getUserMedia({ video: !0, audio: !0 }) } catch (I) { n.target.disabled = !1, h(), f(), I.name === "NotAllowedError" ? window.alert("User denied permission to share video") : window.alert("Failed to get video stream: " + I); return } const t = document.querySelector(".media-container"); t.appendChild(P(e, "user-video")), await a.instance.enumerateDevices(); const i = a.instance.audioInputDevices, r = a.instance.audioOutputDevices, s = a.instance.videoInputDevices, o = a.instance.currentAudioInputDeviceId, p = a.instance.currentVideoInputDeviceId; t.append(E(i, o)), t.append(C(r)), t.append(O(s, p)), B(!1), w(), U(), K() }) } function de() { return l("Get local user audio stream", "local-user-stream-audio-btn", async n => { n.target.disabled = !0, k(), _(); let e; try { e = await a.instance.getUserMedia({ audio: !0 }) } catch (o) { n.target.disabled = !1, g(), f(), o.name === "NotAllowedError" ? window.alert("User denied permission to share audio") : window.alert("Failed to get audio stream: " + o); return } const t = document.querySelector(".media-container"); t.appendChild(ie(e, "user-audio")), await a.instance.enumerateDevices(); const i = a.instance.audioInputDevices, r = a.instance.audioOutputDevices, s = a.instance.currentAudioInputDeviceId; t.append(E(i, s)), t.append(C(r)), B(!0), w(), U() }) } function le() { return l("Get local display stream", "local-display-stream-btn", async n => { n.target.disabled = !0, k(), T(), y(!0); const e = { video: !0, audio: !0 }, t = se(); t !== "" && (e.video = { displaySurface: t }); let i; try { i = await a.instance.getDisplayMedia(e) } catch (s) { n.target.disabled = !1, g(), h(), y(!1), s.name === "NotAllowedError" ? window.alert("User denied permission to share display") : window.alert("Failed to get display stream: " + s); return } document.querySelector(".media-container").appendChild(P(i, "display-video")), ce(), H() }) } function pe() { const n = document.createElement("div"); n.className = "media-container"; const e = document.createElement("h2"); return e.innerText = "Media Demo", n.appendChild(e), n.appendChild(ue()), n.appendChild(de()), n.appendChild(te()), n.appendChild(Y()), n.appendChild(Q()), n.appendChild(le()), n.appendChild(ne()), n.appendChild(re()), n } const L = document.querySelector("#app"); L.appendChild(G()); L.appendChild(pe());
